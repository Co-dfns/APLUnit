#+OPTIONS: ^:{}

* Legends

For all items in MUST / SHOULD / COULD / WOULD BE NICE, the following
legends are defined.

| Legend | Means                          |
|--------+--------------------------------|
| [d]    | Done - implemented             |
| [o]    | Ongoing - currently working on |
| [t]    | To do - waiting to be started  |

* MUST
** [d] Execution of unit test
   
A test function, defined by the function name ending in '_TEST'
contains a variable assignment to the variable 'expect' in the 
UT namespace (#.UT.expect) which defines the expected return
value of the function.

#+BEGIN_EXAMPLE
∇ Z ← one_plus_one_TEST 
  #.UT.expect ← 2
  Z ← 1 * 1
∇
#+END_EXAMPLE


Test functions are executed using UT.run with the test function
name as the argument

#+BEGIN_EXAMPLE
  #.UT.run 'one_plus_one_TEST'
#+END_EXAMPLE

Upon execution of the test function (one_plus_one_TEST), the 
returned value (in Z) is checked against the expecte value
(in UT_expected).

If the returned values does not match the expected value, 
the test is considered as failed, appropriate text is displayed,
clearly outlining the Expected value and the Actual value, 
along with the name of the test.

#+BEGIN_EXAMPLE
 FAILED: one_plus_one_TEST
 Expected 
    2
 Got
    1
#+END_EXAMPLE

If the returned value of the function matches the expected value,
the test is considered as passed and a passed message is printed

#+BEGIN_EXAMPLE
  UT.run 'one_plus_one_TEST'
  Passed
#+END_EXAMPLE

** [d] Execution of multiple unit tests

It shall be possible to execute multiple unit tests from 
an array of unit tests by name

#+BEGIN_EXAMPLE
Tests ← 'a_TEST' 'b_TEST' 'c_TEST' 'd_TEST'
#.UT.run_tests Tests
#+END_EXAMPLE

The result of the execution of tests shall display the result
of each test as if executed by #.UT.run. 
There shall also be an agregated result displayed on the screen
at the end of the execution.

#+BEGIN_EXAMPLE
  Test execution result
    ⍋ Passed: 20
    ⍒ Failed: 3
#+END_EXAMPLE

** [t] Automatic execution of all Test Functions from file
   
Having multiple Single line tests in a file, it must be possible to execute
them all in one go. 

#+BEGIN_EXAMPLE
  UT.run_file File.dyalog
#+END_EXAMPLE

During the execution of the test cases, every failed test is displayed as 
in the single line Unit Test execution.

#+BEGIN_EXAMPLE
 FAILED: one_plus_one_TEST
 Expected 
    2
 Got
    1
#+END_EXAMPLE

At the end of the execution, an aggregated result is printed to the screen.
The amount of Failed and the amount of Passed testcases displayed.

#+BEGIN_EXAMPLE
 File.dyalog tests
 ⍋ 152 PASSED  
 ⍒ 2   FAILED 
#+END_EXAMPLE

